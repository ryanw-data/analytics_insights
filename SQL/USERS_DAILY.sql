WITH USER_UPDATES AS (
    SELECT 
    CASE WHEN sr.ID IN (8) THEN 'Unlicenced' ELSE 'Licenced' END LICENCE_TYPE,
    su.EMAIL USER_EMAIL,
    su.ID SYSTEM_USER_ID,
    he.CREATED_AT CHANGE_TIME,
    DATE_TRUNC('day',he.created_at)::DATE CHANGE_DATE
    FROM HISTORICAL_EVENTS he
    JOIN HIST_USERS u ON u.ID = he.hist_target_user_id
    JOIN SYSTEM_USERS su ON su.ID = u.system_user_id
    JOIN SITE_ROLES sr ON sr.ID = u.site_role_id
    WHERE HISTORICAL_EVENT_TYPE_ID = 18
    AND he.hist_target_site_id = 5
),
CREATED_USERS AS (
    SELECT 
    CASE 
        WHEN NOT EXISTS (SELECT * FROM USER_UPDATES uu WHERE uu.USER_EMAIL = su.EMAIL) THEN CASE WHEN u.SITE_ID IN (8) THEN 'Unlicenced' ELSE 'Licenced' END
        ELSE 'Licenced' END LICENCE_TYPE,
    su.EMAIL USER_EMAIL,
    su.ID SYSTEM_USER_ID,
    u.CREATED_AT CREATE_TIME,
    DATE_TRUNC('day',u.CREATED_AT)::DATE CREATE_DATE
    FROM USERS u
    JOIN SYSTEM_USERS su ON su.ID = u.SYSTEM_USER_ID
    WHERE u.SITE_ID = 5
),
CURRENT_USER_STATE AS (
    SELECT 
    CASE WHEN u.SITE_ROLE_ID IN (8) THEN 'Unlicenced' ELSE 'Licenced' END LICENCE_TYPE,
    su.EMAIL USER_EMAIL,
    su.ID SYSTEM_USER_ID,
    'now'::timestamp CHANGE_TIME,
    DATE_TRUNC('day','now'::timestamp)::DATE CHANGE_DATE
    FROM USERS u
    JOIN SYSTEM_USERS su ON su.ID = u.SYSTEM_USER_ID
    WHERE u.SITE_ID = 5
),
UNIONED_DATASET AS (
SELECT *
FROM (
    SELECT res_1.*, cu.CREATE_DATE,
    ROW_NUMBER() OVER(PARTITION BY res_1.USER_EMAIL, res_1.CHANGE_DATE ORDER BY res_1.CHANGE_TIME) rn
    FROM (
        SELECT *
        FROM USER_UPDATES
        UNION ALL
        SELECT *
        FROM CURRENT_USER_STATE 
        UNION ALL
        SELECT *
        FROM CREATED_USERS
        ORDER BY USER_EMAIL, CHANGE_DATE
    ) res_1
    JOIN CREATED_USERS cu ON cu.SYSTEM_USER_ID = res_1.SYSTEM_USER_ID
) res_2
WHERE rn = 1
AND USER_EMAIL IS NOT NULL
),
DATE_RANGE AS (
    SELECT *
    FROM (
        SELECT date_trunc('day', dd)::DATE DATES
        FROM generate_series ('2015-01-01'::timestamp, 'now'::timestamp, '1 day'::interval) dd
    ) res_1
    CROSS JOIN (SELECT DISTINCT USER_EMAIL, CREATE_DATE, SYSTEM_USER_ID FROM UNIONED_DATASET) x
    WHERE x.CREATE_DATE <= res_1.DATES
)
SELECT
VIEW_DATE,
FIRST_VALUE(LICENCE_TYPE) OVER(PARTITION BY USER_EMAIL, partition_window ORDER BY VIEW_DATE) LICENCE_TYPE,
USER_EMAIL,
SYSTEM_USER_ID,
CREATE_DATE USER_CREATE_DATE, 
CASE WHEN rn_desc = 1 THEN 1 ELSE 0 END CURRENT_STATUS_FLAG
FROM (
    SELECT 
    dr.DATES VIEW_DATE,
    ud.LICENCE_TYPE,
    dr.USER_EMAIL,
    dr.SYSTEM_USER_ID,
    dr.CREATE_DATE,
    SUM(CASE WHEN ud.CREATE_DATE IS NULL THEN 0 ELSE 1 END) OVER(PARTITION BY dr.USER_EMAIL ORDER BY dr.DATES) partition_window,
    ROW_NUMBER() OVER(PARTITION BY dr.USER_EMAIL ORDER BY dr.DATES DESC) rn_desc
    FROM DATE_RANGE dr
    LEFT JOIN UNIONED_DATASET ud ON dr.DATES = ud.CHANGE_DATE AND dr.USER_EMAIL = ud.USER_EMAIL
    ORDER BY dr.user_email, dr.dates
) res_1
ORDER BY USER_EMAIL, VIEW_DATE