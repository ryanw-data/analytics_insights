WITH CURRENT_GROUP_MEMBERSHIPS AS (
    SELECT 
    su.ID SYSTEM_USER_ID,
    su.EMAIL USER_EMAIL,
    'ADDED' UPDATE_TYPE,
    'now'::timestamp CHANGE_TIME,
    DATE_TRUNC('day', 'now'::timestamp)::DATE CHANGE_DATE,
    g.NAME GROUP_NAME
    FROM GROUP_USERS gu
    JOIN USERS u ON u.ID = gu.USER_ID
    JOIN SYSTEM_USERS su ON su.ID = u.SYSTEM_USER_ID
    JOIN GROUPS g ON g.ID = gu.GROUP_ID 
    WHERE gu.SITE_ID = 5
),
GROUP_MEMBERSHIP_CHANGES AS (
    SELECT *
    FROM (
        SELECT 
        su.ID SYSTEM_USER_ID,
        su.email user_email, 
        CASE WHEN he.HISTORICAL_EVENT_TYPE_ID = 42 THEN 'ADDED' ELSE 'REMOVED' END UPDATE_TYPE,
        he.CREATED_AT CHANGE_TIME,
        DATE_TRUNC('day', he.CREATED_AT)::DATE CHANGE_DATE,
        hg.NAME GROUP_NAME,
        ROW_NUMBER() OVER(PARTITION BY su.email, hg.NAME, DATE_TRUNC('day', he.CREATED_AT) ORDER BY he.CREATED_AT) day_rn,
        ROW_NUMBER() OVER(PARTITION BY su.email, hg.NAME ORDER BY he.CREATED_AT) temp_rn
        FROM HISTORICAL_EVENTS he
        JOIN HIST_USERS u ON u.ID = he.hist_target_user_id
        JOIN SYSTEM_USERS su ON su.ID = u.system_user_id
        JOIN HIST_GROUPS hg ON hg.ID = he.HIST_GROUP_ID
        WHERE he.HISTORICAL_EVENT_TYPE_ID IN (42,43)
        AND he.HIST_TARGET_SITE_ID = 5
    ) res_1
    WHERE day_rn = 1
),
INITIAL_GROUP_STATE AS (
    SELECT 
    SYSTEM_USER_ID,
    user_email,
    CASE WHEN UPDATE_TYPE = 'ADDED' THEN 'REMOVED'
         WHEN UPDATE_TYPE = 'REMOVED' THEN 'ADDED'
         ELSE 'ADDED' END UPDATE_TYPE,
    'now'::timestamp - '7 month'::interval  CHANGE_TIME,
    DATE_TRUNC('day', 'now'::timestamp - '7 month'::interval)::DATE CHANGE_DATE,
    GROUP_NAME
    FROM GROUP_MEMBERSHIP_CHANGES
    WHERE temp_rn = 1
),
CATCH_GROUPS_NEVER_CHANGED AS (
    SELECT 
    SYSTEM_USER_ID,
    USER_EMAIL,
    'ADDED' UPDATE_TYPE,
    'now'::timestamp - '7 month'::interval CHANGE_TIME,
    DATE_TRUNC('day', 'now'::timestamp - '7 month'::interval)::DATE CHANGE_DATE,
    GROUP_NAME
    FROM CURRENT_GROUP_MEMBERSHIPS cgm
    WHERE NOT EXISTS (SELECT * FROM GROUP_MEMBERSHIP_CHANGES gmc WHERE gmc.USER_EMAIL = cgm.USER_EMAIL AND gmc.GROUP_NAME = cgm.GROUP_NAME)
),
UNIONED_DATASETS AS (
    SELECT 
    SYSTEM_USER_ID,
    USER_EMAIL,
    UPDATE_TYPE,
    CHANGE_TIME,
    CHANGE_DATE,
    GROUP_NAME
    FROM CURRENT_GROUP_MEMBERSHIPS
    UNION ALL
    SELECT 
    SYSTEM_USER_ID,
    USER_EMAIL,
    UPDATE_TYPE,
    CHANGE_TIME,
    CHANGE_DATE,
    GROUP_NAME
    FROM GROUP_MEMBERSHIP_CHANGES
    UNION ALL
    SELECT 
    SYSTEM_USER_ID,
    USER_EMAIL,
    UPDATE_TYPE,
    CHANGE_TIME,
    CHANGE_DATE,
    GROUP_NAME
    FROM INITIAL_GROUP_STATE
    UNION ALL
    SELECT
    SYSTEM_USER_ID,
    USER_EMAIL,
    UPDATE_TYPE,
    CHANGE_TIME,
    CHANGE_DATE,
    GROUP_NAME
    FROM CATCH_GROUPS_NEVER_CHANGED
),
DATE_RANGE AS (
    SELECT *
    FROM (
        SELECT date_trunc('day', dd)::DATE DATES
        FROM generate_series ('now'::timestamp - '7 month'::interval, 'now'::timestamp, '1 day'::interval) dd
    ) res_1
    CROSS JOIN (SELECT DISTINCT USER_EMAIL, GROUP_NAME, SYSTEM_USER_ID FROM UNIONED_DATASETS) x
)
SELECT 
VIEW_DATE,
SYSTEM_USER_ID,
USER_EMAIL,
GROUP_NAME,
FIRST_VALUE(UPDATE_TYPE) OVER(PARTITION BY USER_EMAIL, partition_window ORDER BY VIEW_DATE) UPDATE_TYPE,
CASE WHEN rn_desc = 1 THEN 1 ELSE 0 END CURRENT_STATUS_FLAG
FROM (
    SELECT 
    dr.DATES VIEW_DATE,
    dr.SYSTEM_USER_ID,
    dr.USER_EMAIL,
    dr.GROUP_NAME,
    ud.UPDATE_TYPE,
    SUM(CASE WHEN ud.UPDATE_TYPE IS NULL THEN 0 ELSE 1 END) OVER(PARTITION BY dr.USER_EMAIL, dr.GROUP_NAME ORDER BY dr.DATES) partition_window,
    ROW_NUMBER() OVER(PARTITION BY dr.USER_EMAIL, dr.GROUP_NAME ORDER BY dr.DATES DESC) rn_desc
    FROM DATE_RANGE dr
    LEFT JOIN UNIONED_DATASETS ud ON ud.USER_EMAIL = dr.USER_EMAIL AND ud.GROUP_NAME = dr.GROUP_NAME AND ud.CHANGE_DATE = dr.DATES
    ORDER BY USER_EMAIL, GROUP_NAME, DATES
) res_1
ORDER BY USER_EMAIL, GROUP_NAME, VIEW_DATE